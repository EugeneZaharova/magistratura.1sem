<html>
<head>
<meta http-equiv="Content-Type" content="text/html; <!charset=UTF-8>">
</head>

<body>
<legend><b>Свойства и функции объекта canvas</b></legend>
<table border="" cellspacing="0">
	<tbody>
	<tr>
	<th>N</th>
	<th>св-во/ф-ция</th>
	<th>синтаксис</th>
	<th>действие</th>
	<th>описание</th>
	</tr>
<tr><td>1</td>
<td>fillStyle</td>
<td>fillStyle[=value]</td>
<td>Определяет цвет заливки [#000000 ]</td>
<td><a href="1.fillStyle.htm">описание</a></td></tr>

<tr><td>2</td>
<td>filter</td>
<td>ctx.filter = "&lt;filter-function1> [&lt;filter-function2>] [&lt;filter-functionN>]</td>
<td>Добавляет эффекты фильтра</td>
<td><a href="2.filter.htm">описание</a></td></tr>

<tr><td>3</td>
<td>font</td>
<td>font[=value]</td><td>Определяет свойства шрифта [10px sans-serif]</td>
<td><a href="3.font.htm">описание</a></td></tr>

<tr><td>4</td>
<td>globalAlpha</td>
<td>context.globalAlpha=value</td>
<td>Устанавливает/возвращает текущее значение прозрачности или альфа-канала графического объекта</td>
<td><a href="4.globalAlpha.htm">описание</a></td></tr>

<tr><td>5</td>
<td>globalCompositeOperation</td>
<td>globalCompositeOperation=type</td>
<td>Определяет как будут себя вести перекрывающиеся фигуры  [source-over] destination-over,source-in,…</td>
<td><a href="5.globalCompositeOperation.htm">описание</a></td></tr>

<tr><td>6</td>
<td>imageSmoothingEnabled</td>
<td>ctx.imageSmoothingEnabled=value</td>
<td>Определяет, есть ли сглаживание у масштабированных изображений (true) или нет (false)</td>
<td><a href="6.imageSmoothingEnabled.htm">описание</a></td></tr>

<tr><td>7</td>
<td>imageSmoothingQuality</td>
<td>ctx.imageSmoothingQuality="low"||"medium"||"high"</td>
<td>Устанавливает качество сглаживания изображения</td>
<td><a href="7.imageSmoothingQuality.htm">описание</a></td></tr>

<tr><td>8</td>
<td>lineCap</td>
<td>lineCap[=value]</td>
<td>Определяет оформление концов линий [butt] (round, square)</td>
<td><a href="8.lineCap.htm">описание</a></td></tr>

<tr><td>9</td>
<td>lineDashOffset</td>
<td>ctx.lineDashOffset=value</td>
<td>Устанавливает фазу смещения пунктирной линии</td>
<td><a href="9.lineDashOffset.htm">описание</a></td></tr>

<tr><td>10</td>
<td>lineJoin</td>
<td>lineJoin[=value]</td>
<td>Определяет оформление соединений линий [miter] (round, bevel)</td>
<td><a href="10.lineJoin.htm">описание</a></td></tr>

<tr><td>11</td>
<td>lineWidth</td>
<td>lineWidth[=value]</td><td>Определяет толщину линий</td>
<td><a href="11.lineWidth.htm">описание</a></td></tr>

<tr><td>12</td>
<td>miterLimit</td>
<td>miterLimit[=value]</td>
<td>При соединении линий с опцией miter, концы линий продлеваются на определенное расстояние чтобы соединиться. Это расстояние будет небольшим для больших углов и в разы больше для острых [10]</td>
<td><a href="12.miterLimit.htm">описание</a></td></tr>

<tr><td>13</td>
<td>shadowBlur</td>
<td>shadowBlur [= value]</td>
<td>Задает размер размытия тени</td>
<td><a href="13.shadowBlur.htm">описание</a></td></tr>

<tr><td>14</td>
<td>shadowColor</td>
<td>shadowColor [= value]</td>
<td>Задает цвет тени [rgba(0, 0, 0, 0)]</td>
<td><a href="14.shadowColor.htm">описание</a></td></tr>

<tr><td>15</td>
<td>shadowOffsetX</td>
<td>shadowOffsetX [= value]</td>
<td>Задает смещение тени относительно объекта по оси X в пикселах</td>
<td><a href="15.shadowOffsetX.htm">описание</a></td></tr>

<tr><td>16</td>
<td>shadowOffsetY</td>
<td>shadowOffsetY [= value]</td>
<td>Задает смещение тени относительно объекта по оси Y в пикселах [0]</td>
<td><a href="16.shadowOffsetY.htm">описание</a></td></tr>

<tr><td>17</td>
<td>strokeStyle</td>
<td>strokeStyle[=value]</td>
<td>Определяет цвет линий</td>
<td><a href="17.strokeStyle.htm">описание</a></td></tr>

<tr><td>18</td>
<td>textAlign</td>
<td>textAlign[=value]</td>
<td>Определяет выравнивание текста [start] (end,left,right,center)</td>
<td><a href="18.textAlign.htm">описание</a></td></tr>

<tr><td>19</td>
<td>textBaseline</td>
<td>textBaseline[=value]</td>
<td>Возвращает / устанавливает выравнивание базовой линии</td>
<td><a href="19.textBaseline.htm">описание</a></td></tr>

<tr><td>20</td>
<td>arc</td>
<td>arc(X,Y, radius, startingAngle, endingAngle, antiClockwise)</td>
<td>Рисует дугу</td>
<td><a href="20.arc.htm">описание</a></td></tr>

<tr><td>21</td>
<td>arcTo</td>
<td>context.arcTo(x1, y1, x2, y2, r)</td>
<td>Создает дугу/кривую между двумя касательными</td>
<td><a href="21.arcTo.htm">описание</a></td></tr>

<tr><td>22</td>
<td>beginPath</td>
<td>beginPath()</td>
<td>Объявляем, что начинаем новый контур. Необходим когда хотим задать разные стили объектам на холсте</td>
<td><a href="22.beginPath.htm">описание</a></td></tr>

<tr><td>23</td>
<td>bezierCurveTo</td>
<td>context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</td>
<td>Добавляет точку к текущему контуру, используя заданные контрольные точки, которые представляют кубическую кривую Безье</td>
<td><a href="23.bezierCurveTo.htm">описание</a></td></tr>

<tr><td>24</td>
<td>clearRect</td>
<td>clearRect(x,y,width,height)</td>
<td>Очищает указанную область</td>
<td><a href="24.clearRect.htm">описание</a></td></tr>

<tr><td>25</td>
<td>clip</td>
<td>clip()</td>
<td>Удаляется все, что находится вне указанной фигуры</td>
<td><a href="25.clip.htm">описание</a></td></tr>

<tr><td>26</td>
<td>closePath</td>
<td>closePath()</td>
<td>Замыкаем контур: последняя точка контура соединяется с первой. Текущее положение на холсте перемещается туда же. Начало контура beginPath()</td>
<td><a href="26.closePath.htm">описание</a></td></tr>

<tr><td>27</td>
<td>createImageData</td>
<td>createImageData(width, height)</td>
<td>Создает объект imageData</td>
<td><a href="27.createImageData.htm">описание</a></td></tr>

<tr><td>28</td>
<td>createLinearGradient</td>
<td>createLinearGradient(x1,y1,x2,y2)</td>
<td>Создает объект линейного градиента</td>
<td><a href="28.createLinearGradient.htm">описание</a></td></tr>

<tr><td>29</td>
<td>createPattern</td>
<td>createPattern(image,type)</td>
<td>Позволяет размножать изображение</td>
<td><a href="29.createPattern.htm">описание</a></td></tr>

<tr><td>30</td>
<td>createRadialGradient</td>
<td>createRadialGradient(x1,y1,r1,x2,y2,r2)</td>
<td>Создает объект радиального градиента</td>
<td><a href="30.createRadialGradient.htm">описание</a></td></tr>

<tr><td>31</td>
<td>drawFocusIfNeeded</td>
<td>context.drawFocusIfNeeded(element)</td>
<td>Рисует область фокусировки вокруг текущего или заданного пути, если указанный элемент находится в фокусе</td>
<td><a href="31.drawFocusIfNeeded.htm">описание</a></td></tr>

<tr><td>32</td>
<td>drawImage</td>
<td>drawImage(image, x, y)</td>
<td>Выводит изображение на хосте. Имеет несколько вариантов синтаксиса с разными назначениями</td>
<td><a href="32.drawImage.htm">описание</a></td></tr>

<tr><td>33</td>
<td>ellipse</td>
<td>ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle [, anticlockwise])</td>
<td>Добавляет эллиптическую дугу</td>
<td><a href="33.ellipse.htm">описание</a></td></tr>

<tr><td>34</td>
<td>fill</td>
<td>fill()</td>
<td>Делает заливку фигуры</td>
<td><a href="34.fill.htm">описание</a></td></tr>

<tr><td>35</td>
<td>fillRect</td>
<td>fillRect(x,y,width,height)</td>
<td>Заливает прямоугольную область цветом, определенный свойством fillStyle</td>
<td><a href="35.fillRect.htm">описание</a></td></tr>

<tr><td>36</td>
<td>fillText</td>
<td>fillText(text, x, y [, maxWidth ] )</td>
<td>Рисуем текст залитый цветом, определенным fillStyle</td>
<td><a href="36.fillText.htm">описание</a></td></tr>

<tr><td>37</td>
<td>getContextAttributes</td>
<td>getContextAttributes()</td>
<td>Возвращает объект, который описывает атрибуты, установленные на контексте</td>
<td><a href="37.getContextAttributes.htm">описание</a></td></tr>

<tr><td>38</td>
<td>getImageData</td>
<td>getImageData(sx, sy, sw, sh)</td>
<td>Метод возвращает данные о цвете (RGB) и прозрачности указанного участка холста</td>
<td><a href="38.getImageData.htm">описание</a></td></tr>

<tr><td>39</td>
<td>getLineDash</td>
<td>ctx.getLineDash()</td>
<td>Получает шаблон текущей пунктирной линии</td>
<td><a href="39.getLineDash.htm">описание</a></td></tr>

<tr><td>40</td>
<td>getTransform</td>
<td>let storedTransform = ctx.getTransform()</td>
<td>Извлекает матрицу преобразования, приложенную к контексту</td>
<td><a href="40.getTransform.htm">описание</a></td></tr>

<tr><td>41</td>
<td>isPointInPath</td>
<td>isPointInPath(x, y)</td>
<td>Метод возвращает true, если указанная точка находится внутри контура, и false — если вне</td>
<td><a href="41.isPointInPath.htm">описание</a></td></tr>

<tr><td>42</td>
<td>isPointInStroke</td>
<td>ctx.isPointInStroke(x, y)</td>
<td>Проверяет, находится ли указанная точка внутри области пути</td>
<td><a href="42.isPointInStroke.htm">описание</a></td></tr>

<tr><td>43</td>
<td>lineTo</td>
<td>lineTo(x,y)</td>
<td>Рисует линию от текущего положения на холсте до точки (x, y). По этим координатам так же будет новое текущее положение на холсте</td>
<td><a href="43.lineTo.htm">описание</a></td></tr>

<tr><td>44</td>
<td>measureText</td>
<td>context.measureText(текст).width</td>
<td>Возвращает объект, содержащий ширину заданного текста в пикселях</td>
<td><a href="44.measureText.htm">описание</a></td></tr>

<tr><td>45</td>
<td>moveTo</td>
<td>moveTo(x,y)</td>
<td>Перемещаем текущие положение на холсте к координатам (x, y)</td>
<td><a href="45.moveTo.htm">описание</a></td></tr>

<tr><td>46</td>
<td>putImageData</td>
<td>putImageData(imageData, x, y [, dX, dY, dWidth, dHeight])</td>
<td>Помещает на холст объект imageData (содержит RGBA информацию)</td>
<td><a href="46.putImageData.htm">описание</a></td></tr>

<tr><td>47</td>
<td>quadraticCurveTo</td>
<td>quadraticCurveTo(controlX, controlY, endX, endY)</td>
<td>Рисует кривую Безье 2-го порядка от текущей точки до указанной через промежуточную (контрольную)</td>
<td><a href="47.quadraticCurveTo.htm">описание</a></td></tr>

<tr><td>48</td>
<td>rect</td>
<td>context.rect(x, y, width, height)</td>
<td>Создает прямоугольник</td>
<td><a href="48.rect.htm">описание</a></td></tr>

<tr><td>49</td>
<td>resetTransform</td>
<td>void ctx.resetTransform()</td>
<td>Сбрасывает текущее преобразование к единичной матрице</td>
<td><a href="49.resetTransform.htm">описание</a></td></tr>

<tr><td>50</td>
<td>restore</td>
<td>restore()</td>
<td>Извлекает из стека состояние канвы. В паре с методом save()</td>
<td><a href="50.restore.htm">описание</a></td></tr>

<tr><td>51</td>
<td>rotate</td>
<td>rotate(angle)</td>
<td>Поворачивает полотно на заданный угол вокруг точки начала координат</td>
<td><a href="51.rotate.htm">описание</a></td></tr>

<tr><td>52</td>
<td>save</td>
<td>save()</td>
<td>Сохраняет (помещает в стек) состояние канвы</td>
<td><a href="52.save.htm">описание</a></td></tr>

<tr><td>53</td>
<td>scale</td>
<td>scale(x, y)</td>
<td>Масштабирует единицы измерения холста</td>
<td><a href="53.scale.htm">описание</a></td></tr>

<tr><td>54</td>
<td>setLineDash</td>
<td>ctx.setLineDash(segments)</td>
<td>Задает шаблон пунктирной линии</td>
<td><a href="54.setLineDash.htm">описание</a></td></tr>

<tr><td>55</td>
<td>setTransform</td>
<td>setTransform(a,b,c,d,e,f)</td>
<td>Делает сброс матрицы преобразования к единичной матрице, а затем вызывается метод transform с параметрами указанными в setTransform</td>
<td><a href="55.setTransform.htm">описание</a></td></tr>

<tr><td>56</td>
<td>stroke</td>
<td>stroke()</td>
<td>Делает нарисованные контуры видимыми</td>
<td><a href="56.stroke.htm">описание</a></td></tr>

<tr><td>57</td>
<td>strokeRect</td>
<td>strokeRect(x,y,width,height)</td>
<td>Рисует контур прямоугольника цветом, определенный свойством strokeStyle</td>
<td><a href="57.strokeRect.htm">описание</a></td></tr>

<tr><td>58</td>
<td>strokeText</td>
<td>context.strokeText(text, x, y, maxWidth)</td>
<td>Рисует текст без заливки. Цвет по умолчанию черный</td>
<td><a href="58.strokeText.htm">описание</a></td></tr>

<tr><td>59</td>
<td>transform</td>
<td>transform(a,b,c,d,e,f)</td>
<td>Применяет нестандартную матрицу преобразования с координатами a,b,c,d,e</td>
<td><a href="59.transform.htm">описание</a></td></tr>

<tr><td>60</td>
<td>translate</td>
<td>translate(x, y)</td>
<td>Перемещает канву и начало координат в новое место</td>
<td><a href="60.translate.htm">описание</a></td></tr>

<tr><td>61</td>
<td>addColorStop</td>
<td>gradient.addColorStop(позиция, цвет)</td>
<td>Определяет цвет и позицию остановки в объекте градиента</td>
<td><a href="61.addColorStop.htm">описание</a></td></tr>

<tr><td>62</td>
<td>fillStroke</td>
<td>fillStroke(x,y,width,height)</td><td>Рисует контур прямоугольника, определенный свойством strokeStyle</td>
<td><a href="62.fillStroke.htm">описание</a></td></tr>

</tbody>
</table>
</body>
</html>